% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 23-Dec-2022 20:30:36
%This MATLAB code is used to fit a neural network to a set of input-output 
% data for the purpose of predicting outputs from new inputs. 
% This script assumes these variables are defined:
%
%   Input - input data.
%   labels - target data.
% The input-output data is read from two .csv files "CFD_data.csv" and "CFDAnalasis2.csv".

% The first part of the code reads the input-output data and stores it in variables "Input" and "labels". 
% The "Input" data is used for training the neural network, while "labels" represents the desired output.
a = readtable('CFD_data.csv');
Testdata=readtable('CFDAnalasis2.csv');
% a=CFDdata;
labels=table2array(a(:,"Nu"));

c=table2array(a);
b=table2array(Testdata);
Input=c(:,1:6);
Xtest=b(:,1:6);
x = Input';
t = labels';
% The next part of the code sets up the parameters for training the neural network. A Levenberg-Marquardt backpropagation algorithm
% (trainlm) is selected as the training function. A single hidden layer
% with 10 neurons is created to form the network. The data is divided into 70% training, 15% validation and 15% testing sets.

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
% The network is then trained on the input data (x) and the desired output (t). The performance of the network is evaluated
% by comparing the predicted output (y) with the desired output (t). The mean absolute percentage error (MAPE) is
% calculated and the predicted outputs for the test data (Xtest) are obtained using the trained network.
% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
pre_MAPE = abs((y-t)./t);
MAPE = mean(pre_MAPE);
Predicted= net(Xtest');
% View the Network
% Finally, the trained network can be visualized using the "view" function. 
view(net)

% The code also includes comments
% for various plots that can be created to visualize the performance of the network, but these plots are
% currently commented out.

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

