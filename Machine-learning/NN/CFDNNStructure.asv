% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 23-Dec-2022 20:30:36
%
% This script assumes these variables are defined:
%
%   Input - input data.
%   labels - target data.
a = readtable('CFD_data.csv');
Testdata=readtable('CFDAnalasis.csv');
% a=CFDdata;
labels=table2array(a(:,"Nu"));

c=table2array(a);
Input=c(:,1:6);

x = Input';
t = labels';
Xtest=
% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
pre_MAPE = abs((y-t)./t);
MAPE = mean(pre_MAPE);
Predicted= net(x);
% View the Network
view(net)


% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

